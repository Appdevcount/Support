'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Namespace Data

    Partial Public Class payitEntities
        Inherits DbContext
    
        Public Sub New()
            MyBase.New("name=payitEntities")
        End Sub
    
        Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
            Throw New UnintentionalCodeFirstException()
        End Sub
    
        Public Overridable Property AlrahmaCharities() As DbSet(Of AlrahmaCharity)
        Public Overridable Property AlrahmaCharityTransactions() As DbSet(Of AlrahmaCharityTransaction)
        Public Overridable Property CharityUserServiceConfigs() As DbSet(Of CharityUserServiceConfig)
        Public Overridable Property CMSUsers() As DbSet(Of CMSUser)
        Public Overridable Property Denominations() As DbSet(Of Denomination)
        Public Overridable Property DummyPINS() As DbSet(Of DummyPIN)
        Public Overridable Property EnetServices() As DbSet(Of EnetService)
        Public Overridable Property LogTraces() As DbSet(Of LogTrace)
        Public Overridable Property OperatorsCredits() As DbSet(Of OperatorsCredit)
        Public Overridable Property OperatorsCreditHistories() As DbSet(Of OperatorsCreditHistory)
        Public Overridable Property PayitCategories() As DbSet(Of PayitCategory)
        Public Overridable Property PayItCCLogins() As DbSet(Of PayItCCLogin)
        Public Overridable Property PayItCCTrans() As DbSet(Of PayItCCTran)
        Public Overridable Property PayitCommissions() As DbSet(Of PayitCommission)
        Public Overridable Property PayitComplaints() As DbSet(Of PayitComplaint)
        Public Overridable Property payitcomplaintstracks() As DbSet(Of payitcomplaintstrack)
        Public Overridable Property PayItCountries() As DbSet(Of PayItCountry)
        Public Overridable Property PayitiSYS() As DbSet(Of PayitiSY)
        Public Overridable Property PayitServices() As DbSet(Of PayitService)
        Public Overridable Property PayitServicesCategories() As DbSet(Of PayitServicesCategory)
        Public Overridable Property PayitServicesConfigs() As DbSet(Of PayitServicesConfig)
        Public Overridable Property PayitServicesPaymentsCommissions() As DbSet(Of PayitServicesPaymentsCommission)
        Public Overridable Property PayitUDIDs() As DbSet(Of PayitUDID)
        Public Overridable Property PayitUDID_Restrictions() As DbSet(Of PayitUDID_Restrictions)
        Public Overridable Property PayItUserInfoes() As DbSet(Of PayItUserInfo)
        Public Overridable Property PayItUserInfo_Restrictions() As DbSet(Of PayItUserInfo_Restrictions)
        Public Overridable Property PayItUserRestrictions() As DbSet(Of PayItUserRestriction)
        Public Overridable Property PayitUserServiceCategories() As DbSet(Of PayitUserServiceCategory)
        Public Overridable Property PaymentChannels() As DbSet(Of PaymentChannel)
        Public Overridable Property PINS() As DbSet(Of PIN)
        Public Overridable Property PinsAlerts() As DbSet(Of PinsAlert)
        Public Overridable Property Promos() As DbSet(Of Promo)
        Public Overridable Property PushNotificationMessages() As DbSet(Of PushNotificationMessage)
        Public Overridable Property Services() As DbSet(Of Service)
        Public Overridable Property ServicesAndPayments() As DbSet(Of ServicesAndPayment)
        Public Overridable Property ServicesPaymentsCommissions() As DbSet(Of ServicesPaymentsCommission)
        Public Overridable Property SMSPINs() As DbSet(Of SMSPIN)
        Public Overridable Property StockDenominations() As DbSet(Of StockDenomination)
        Public Overridable Property StockMConnects() As DbSet(Of StockMConnect)
        Public Overridable Property StockOrders() As DbSet(Of StockOrder)
        Public Overridable Property StockRepositories() As DbSet(Of StockRepository)
        Public Overridable Property StockRequestResponses() As DbSet(Of StockRequestResponse)
        Public Overridable Property ThirdParty_knet_trans() As DbSet(Of ThirdParty_knet_trans)
        Public Overridable Property ThirdParty_knet_trans_20150219() As DbSet(Of ThirdParty_knet_trans_20150219)
        Public Overridable Property ThirdParty_knet_trans_20150319() As DbSet(Of ThirdParty_knet_trans_20150319)
        Public Overridable Property ThirdParty_knet_trans_20150518() As DbSet(Of ThirdParty_knet_trans_20150518)
        Public Overridable Property ThirdParty_knet_trans20150422() As DbSet(Of ThirdParty_knet_trans20150422)
        Public Overridable Property Tickets() As DbSet(Of Ticket)
        Public Overridable Property topup_trans() As DbSet(Of topup_trans)
        Public Overridable Property Translations() As DbSet(Of Translation)
        Public Overridable Property UpdateUserInfoes() As DbSet(Of UpdateUserInfo)
        Public Overridable Property users() As DbSet(Of user)
        Public Overridable Property ZakatProjects() As DbSet(Of ZakatProject)
        Public Overridable Property ZakatProjectsTransactions() As DbSet(Of ZakatProjectsTransaction)
        Public Overridable Property balances() As DbSet(Of balance)
        Public Overridable Property topuprates() As DbSet(Of topuprate)
        Public Overridable Property topupratesnews() As DbSet(Of topupratesnew)
        Public Overridable Property PINPriorities() As DbSet(Of PINPriority)
        Public Overridable Property KYCRatingRules() As DbSet(Of KYCRatingRule)
        Public Overridable Property KYCRatingValidations() As DbSet(Of KYCRatingValidation)
        Public Overridable Property KYCTypes() As DbSet(Of KYCType)
        Public Overridable Property PayitServicesKYCTypes() As DbSet(Of PayitServicesKYCType)
        Public Overridable Property PayitServiceUserKYCs() As DbSet(Of PayitServiceUserKYC)
        Public Overridable Property UserFavourites() As DbSet(Of UserFavourite)
        Public Overridable Property UserTransactions() As DbSet(Of UserTransaction)
        Public Overridable Property ConfirmedTpartyTransactions() As DbSet(Of ConfirmedTpartyTransaction)
        Public Overridable Property PayitServiceValidations() As DbSet(Of PayitServiceValidation)
        Public Overridable Property CharitySubProjects() As DbSet(Of CharitySubProject)
        Public Overridable Property PayitComplaintsSocials() As DbSet(Of PayitComplaintsSocial)
        Public Overridable Property FactTables() As DbSet(Of FactTable)
        Public Overridable Property FraudLists() As DbSet(Of FraudList)
        Public Overridable Property FraudWhiteLists() As DbSet(Of FraudWhiteList)
        Public Overridable Property ThirdpartyServiceTransactions() As DbSet(Of ThirdpartyServiceTransaction)
        Public Overridable Property CharityTransactionsHistories() As DbSet(Of CharityTransactionsHistory)
        Public Overridable Property DPayitTPTransactions() As DbSet(Of DPayitTPTransaction)
        Public Overridable Property Transactions() As DbSet(Of Transaction)
        Public Overridable Property FraudRules() As DbSet(Of FraudRule)
        Public Overridable Property ServicePaymentTunnels() As DbSet(Of ServicePaymentTunnel)
        Public Overridable Property PaymentChannelTunnels() As DbSet(Of PaymentChannelTunnel)
        Public Overridable Property QucikPayMasters() As DbSet(Of QucikPayMaster)
        Public Overridable Property QuickPayTransactions() As DbSet(Of QuickPayTransaction)
    
        <DbFunction("payitEntities", "fnSplitString")>
        Public Overridable Function fnSplitString([string] As String, delimiter As String) As IQueryable(Of fnSplitString_Result)
            Dim stringParameter As ObjectParameter = If([string] IsNot Nothing, New ObjectParameter("string", [string]), New ObjectParameter("string", GetType(String)))
    
            Dim delimiterParameter As ObjectParameter = If(delimiter IsNot Nothing, New ObjectParameter("delimiter", delimiter), New ObjectParameter("delimiter", GetType(String)))
    
             Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of fnSplitString_Result)("[payitEntities].[fnSplitString](@string, @delimiter)", stringParameter, delimiterParameter)
        End Function
    
        Public Overridable Function AddUpdateCustomer(iD As Nullable(Of Integer), status As String, comments As String, processed_By As String) As ObjectResult(Of AddUpdateCustomer_Result)
            Dim iDParameter As ObjectParameter = If(iD.HasValue, New ObjectParameter("ID", iD), New ObjectParameter("ID", GetType(Integer)))
    
            Dim statusParameter As ObjectParameter = If(status IsNot Nothing, New ObjectParameter("Status", status), New ObjectParameter("Status", GetType(String)))
    
            Dim commentsParameter As ObjectParameter = If(comments IsNot Nothing, New ObjectParameter("Comments", comments), New ObjectParameter("Comments", GetType(String)))
    
            Dim processed_ByParameter As ObjectParameter = If(processed_By IsNot Nothing, New ObjectParameter("Processed_By", processed_By), New ObjectParameter("Processed_By", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of AddUpdateCustomer_Result)("AddUpdateCustomer", iDParameter, statusParameter, commentsParameter, processed_ByParameter)
        End Function
    
        Public Overridable Function CashUReturnURL_INSERT(lANG As String, amount As Nullable(Of Double), netAmount As Nullable(Of Double), currency As String, sessionID As String, serviceCode As String, referenceID As String, trnDate As String, service As String) As Integer
            Dim lANGParameter As ObjectParameter = If(lANG IsNot Nothing, New ObjectParameter("LANG", lANG), New ObjectParameter("LANG", GetType(String)))
    
            Dim amountParameter As ObjectParameter = If(amount.HasValue, New ObjectParameter("Amount", amount), New ObjectParameter("Amount", GetType(Double)))
    
            Dim netAmountParameter As ObjectParameter = If(netAmount.HasValue, New ObjectParameter("NetAmount", netAmount), New ObjectParameter("NetAmount", GetType(Double)))
    
            Dim currencyParameter As ObjectParameter = If(currency IsNot Nothing, New ObjectParameter("Currency", currency), New ObjectParameter("Currency", GetType(String)))
    
            Dim sessionIDParameter As ObjectParameter = If(sessionID IsNot Nothing, New ObjectParameter("SessionID", sessionID), New ObjectParameter("SessionID", GetType(String)))
    
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("serviceCode", serviceCode), New ObjectParameter("serviceCode", GetType(String)))
    
            Dim referenceIDParameter As ObjectParameter = If(referenceID IsNot Nothing, New ObjectParameter("ReferenceID", referenceID), New ObjectParameter("ReferenceID", GetType(String)))
    
            Dim trnDateParameter As ObjectParameter = If(trnDate IsNot Nothing, New ObjectParameter("trnDate", trnDate), New ObjectParameter("trnDate", GetType(String)))
    
            Dim serviceParameter As ObjectParameter = If(service IsNot Nothing, New ObjectParameter("Service", service), New ObjectParameter("Service", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("CashUReturnURL_INSERT", lANGParameter, amountParameter, netAmountParameter, currencyParameter, sessionIDParameter, serviceCodeParameter, referenceIDParameter, trnDateParameter, serviceParameter)
        End Function
    
        Public Overridable Function CashUSorryURL_INSERT(errorCode As String, txt1 As String, sessionID As String) As Integer
            Dim errorCodeParameter As ObjectParameter = If(errorCode IsNot Nothing, New ObjectParameter("ErrorCode", errorCode), New ObjectParameter("ErrorCode", GetType(String)))
    
            Dim txt1Parameter As ObjectParameter = If(txt1 IsNot Nothing, New ObjectParameter("txt1", txt1), New ObjectParameter("txt1", GetType(String)))
    
            Dim sessionIDParameter As ObjectParameter = If(sessionID IsNot Nothing, New ObjectParameter("SessionID", sessionID), New ObjectParameter("SessionID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("CashUSorryURL_INSERT", errorCodeParameter, txt1Parameter, sessionIDParameter)
        End Function
    
        Public Overridable Function DeviceModels_INSERT(iSYSID As String, userAgent As String) As Integer
            Dim iSYSIDParameter As ObjectParameter = If(iSYSID IsNot Nothing, New ObjectParameter("iSYSID", iSYSID), New ObjectParameter("iSYSID", GetType(String)))
    
            Dim userAgentParameter As ObjectParameter = If(userAgent IsNot Nothing, New ObjectParameter("UserAgent", userAgent), New ObjectParameter("UserAgent", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("DeviceModels_INSERT", iSYSIDParameter, userAgentParameter)
        End Function
    
        Public Overridable Function ezetop_denominations_INSERT_UPDATE(country_code As String, operator_code As String, denomination As String) As Integer
            Dim country_codeParameter As ObjectParameter = If(country_code IsNot Nothing, New ObjectParameter("country_code", country_code), New ObjectParameter("country_code", GetType(String)))
    
            Dim operator_codeParameter As ObjectParameter = If(operator_code IsNot Nothing, New ObjectParameter("operator_code", operator_code), New ObjectParameter("operator_code", GetType(String)))
    
            Dim denominationParameter As ObjectParameter = If(denomination IsNot Nothing, New ObjectParameter("denomination", denomination), New ObjectParameter("denomination", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ezetop_denominations_INSERT_UPDATE", country_codeParameter, operator_codeParameter, denominationParameter)
        End Function
    
        Public Overridable Function ezetop_operators_INSERT_UPDATE(country_code As String, country_name As String, operator_code As String, operator_name As String) As Integer
            Dim country_codeParameter As ObjectParameter = If(country_code IsNot Nothing, New ObjectParameter("country_code", country_code), New ObjectParameter("country_code", GetType(String)))
    
            Dim country_nameParameter As ObjectParameter = If(country_name IsNot Nothing, New ObjectParameter("country_name", country_name), New ObjectParameter("country_name", GetType(String)))
    
            Dim operator_codeParameter As ObjectParameter = If(operator_code IsNot Nothing, New ObjectParameter("operator_code", operator_code), New ObjectParameter("operator_code", GetType(String)))
    
            Dim operator_nameParameter As ObjectParameter = If(operator_name IsNot Nothing, New ObjectParameter("operator_name", operator_name), New ObjectParameter("operator_name", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ezetop_operators_INSERT_UPDATE", country_codeParameter, country_nameParameter, operator_codeParameter, operator_nameParameter)
        End Function
    
        Public Overridable Function GetAgentStats(agentId As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As ObjectResult(Of GetAgentStats_Result)
            Dim agentIdParameter As ObjectParameter = If(agentId IsNot Nothing, New ObjectParameter("AgentId", agentId), New ObjectParameter("AgentId", GetType(String)))
    
            Dim startDateParameter As ObjectParameter = If(startDate.HasValue, New ObjectParameter("startDate", startDate), New ObjectParameter("startDate", GetType(Date)))
    
            Dim endDateParameter As ObjectParameter = If(endDate.HasValue, New ObjectParameter("endDate", endDate), New ObjectParameter("endDate", GetType(Date)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetAgentStats_Result)("GetAgentStats", agentIdParameter, startDateParameter, endDateParameter)
        End Function
    
        Public Overridable Function GetComplaintAudit(rollId As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As ObjectResult(Of GetComplaintAudit_Result)
            Dim rollIdParameter As ObjectParameter = If(rollId IsNot Nothing, New ObjectParameter("RollId", rollId), New ObjectParameter("RollId", GetType(String)))
    
            Dim startDateParameter As ObjectParameter = If(startDate.HasValue, New ObjectParameter("startDate", startDate), New ObjectParameter("startDate", GetType(Date)))
    
            Dim endDateParameter As ObjectParameter = If(endDate.HasValue, New ObjectParameter("endDate", endDate), New ObjectParameter("endDate", GetType(Date)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetComplaintAudit_Result)("GetComplaintAudit", rollIdParameter, startDateParameter, endDateParameter)
        End Function
    
        Public Overridable Function GetInternationalCountryList() As ObjectResult(Of GetInternationalCountryList_Result)
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetInternationalCountryList_Result)("GetInternationalCountryList")
        End Function
    
        Public Overridable Function GetInternationalProductList(country As String) As ObjectResult(Of GetInternationalProductList_Result)
            Dim countryParameter As ObjectParameter = If(country IsNot Nothing, New ObjectParameter("country", country), New ObjectParameter("country", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetInternationalProductList_Result)("GetInternationalProductList", countryParameter)
        End Function
    
        Public Overridable Function GetPINDeominations(serviceCode As String) As ObjectResult(Of GetPINDeominations_Result)
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("serviceCode", serviceCode), New ObjectParameter("serviceCode", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetPINDeominations_Result)("GetPINDeominations", serviceCodeParameter)
        End Function
    
        Public Overridable Function GetPINDeominationstest(serviceCode As String) As ObjectResult(Of GetPINDeominationstest_Result)
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("serviceCode", serviceCode), New ObjectParameter("serviceCode", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetPINDeominationstest_Result)("GetPINDeominationstest", serviceCodeParameter)
        End Function
    
        Public Overridable Function GetReprocessAudit(rollId As String, startDate As Nullable(Of Date), endDate As Nullable(Of Date)) As ObjectResult(Of GetReprocessAudit_Result)
            Dim rollIdParameter As ObjectParameter = If(rollId IsNot Nothing, New ObjectParameter("RollId", rollId), New ObjectParameter("RollId", GetType(String)))
    
            Dim startDateParameter As ObjectParameter = If(startDate.HasValue, New ObjectParameter("startDate", startDate), New ObjectParameter("startDate", GetType(Date)))
    
            Dim endDateParameter As ObjectParameter = If(endDate.HasValue, New ObjectParameter("endDate", endDate), New ObjectParameter("endDate", GetType(Date)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetReprocessAudit_Result)("GetReprocessAudit", rollIdParameter, startDateParameter, endDateParameter)
        End Function
    
        Public Overridable Function GetSearch_Pager(searchTerm As String, pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), recordCount As ObjectParameter) As Integer
            Dim searchTermParameter As ObjectParameter = If(searchTerm IsNot Nothing, New ObjectParameter("SearchTerm", searchTerm), New ObjectParameter("SearchTerm", GetType(String)))
    
            Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))
    
            Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("GetSearch_Pager", searchTermParameter, pageIndexParameter, pageSizeParameter, recordCount)
        End Function
    
        Public Overridable Function GetSearches_Pager(searchTerm As String, pageIndex As Nullable(Of Integer), pageSize As Nullable(Of Integer), recordCount As ObjectParameter) As Integer
            Dim searchTermParameter As ObjectParameter = If(searchTerm IsNot Nothing, New ObjectParameter("SearchTerm", searchTerm), New ObjectParameter("SearchTerm", GetType(String)))
    
            Dim pageIndexParameter As ObjectParameter = If(pageIndex.HasValue, New ObjectParameter("PageIndex", pageIndex), New ObjectParameter("PageIndex", GetType(Integer)))
    
            Dim pageSizeParameter As ObjectParameter = If(pageSize.HasValue, New ObjectParameter("PageSize", pageSize), New ObjectParameter("PageSize", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("GetSearches_Pager", searchTermParameter, pageIndexParameter, pageSizeParameter, recordCount)
        End Function
    
        Public Overridable Function InsertCharityPaymentTransaction(projectID As Nullable(Of Integer), mobilenumber As String, email As String, amount As String, status As String, trackID As String, serviceCode As String) As Integer
            Dim projectIDParameter As ObjectParameter = If(projectID.HasValue, New ObjectParameter("projectID", projectID), New ObjectParameter("projectID", GetType(Integer)))
    
            Dim mobilenumberParameter As ObjectParameter = If(mobilenumber IsNot Nothing, New ObjectParameter("mobilenumber", mobilenumber), New ObjectParameter("mobilenumber", GetType(String)))
    
            Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("email", email), New ObjectParameter("email", GetType(String)))
    
            Dim amountParameter As ObjectParameter = If(amount IsNot Nothing, New ObjectParameter("amount", amount), New ObjectParameter("amount", GetType(String)))
    
            Dim statusParameter As ObjectParameter = If(status IsNot Nothing, New ObjectParameter("Status", status), New ObjectParameter("Status", GetType(String)))
    
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(String)))
    
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("ServiceCode", serviceCode), New ObjectParameter("ServiceCode", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertCharityPaymentTransaction", projectIDParameter, mobilenumberParameter, emailParameter, amountParameter, statusParameter, trackIDParameter, serviceCodeParameter)
        End Function
    
        Public Overridable Function InsertEnetOldtoNew(trackid As Nullable(Of Long)) As ObjectResult(Of InsertEnetOldtoNew_Result)
            Dim trackidParameter As ObjectParameter = If(trackid.HasValue, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(Long)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of InsertEnetOldtoNew_Result)("InsertEnetOldtoNew", trackidParameter)
        End Function
    
        Public Overridable Function InsertEnetTransaction(uname As String, servicename As String, servicecode As String, serviceID As Nullable(Of Integer), mobileNo As String, amount As String, pid As Nullable(Of Integer), ptype As String, trackID As Nullable(Of Long), knetprocess As String, etransno As String, transresul As String, enettransresp As String) As Integer
            Dim unameParameter As ObjectParameter = If(uname IsNot Nothing, New ObjectParameter("uname", uname), New ObjectParameter("uname", GetType(String)))
    
            Dim servicenameParameter As ObjectParameter = If(servicename IsNot Nothing, New ObjectParameter("servicename", servicename), New ObjectParameter("servicename", GetType(String)))
    
            Dim servicecodeParameter As ObjectParameter = If(servicecode IsNot Nothing, New ObjectParameter("servicecode", servicecode), New ObjectParameter("servicecode", GetType(String)))
    
            Dim serviceIDParameter As ObjectParameter = If(serviceID.HasValue, New ObjectParameter("ServiceID", serviceID), New ObjectParameter("ServiceID", GetType(Integer)))
    
            Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))
    
            Dim amountParameter As ObjectParameter = If(amount IsNot Nothing, New ObjectParameter("amount", amount), New ObjectParameter("amount", GetType(String)))
    
            Dim pidParameter As ObjectParameter = If(pid.HasValue, New ObjectParameter("pid", pid), New ObjectParameter("pid", GetType(Integer)))
    
            Dim ptypeParameter As ObjectParameter = If(ptype IsNot Nothing, New ObjectParameter("ptype", ptype), New ObjectParameter("ptype", GetType(String)))
    
            Dim trackIDParameter As ObjectParameter = If(trackID.HasValue, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(Long)))
    
            Dim knetprocessParameter As ObjectParameter = If(knetprocess IsNot Nothing, New ObjectParameter("knetprocess", knetprocess), New ObjectParameter("knetprocess", GetType(String)))
    
            Dim etransnoParameter As ObjectParameter = If(etransno IsNot Nothing, New ObjectParameter("Etransno", etransno), New ObjectParameter("Etransno", GetType(String)))
    
            Dim transresulParameter As ObjectParameter = If(transresul IsNot Nothing, New ObjectParameter("transresul", transresul), New ObjectParameter("transresul", GetType(String)))
    
            Dim enettransrespParameter As ObjectParameter = If(enettransresp IsNot Nothing, New ObjectParameter("enettransresp", enettransresp), New ObjectParameter("enettransresp", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertEnetTransaction", unameParameter, servicenameParameter, servicecodeParameter, serviceIDParameter, mobileNoParameter, amountParameter, pidParameter, ptypeParameter, trackIDParameter, knetprocessParameter, etransnoParameter, transresulParameter, enettransrespParameter)
        End Function
    
        Public Overridable Function InsertPayitComplaint(mobileno As String, emailID As String, msg As String, name As String, deviceID As String, udid_id As Nullable(Of Integer), ticketID As String) As Integer
            Dim mobilenoParameter As ObjectParameter = If(mobileno IsNot Nothing, New ObjectParameter("mobileno", mobileno), New ObjectParameter("mobileno", GetType(String)))
    
            Dim emailIDParameter As ObjectParameter = If(emailID IsNot Nothing, New ObjectParameter("emailID", emailID), New ObjectParameter("emailID", GetType(String)))
    
            Dim msgParameter As ObjectParameter = If(msg IsNot Nothing, New ObjectParameter("msg", msg), New ObjectParameter("msg", GetType(String)))
    
            Dim nameParameter As ObjectParameter = If(name IsNot Nothing, New ObjectParameter("name", name), New ObjectParameter("name", GetType(String)))
    
            Dim deviceIDParameter As ObjectParameter = If(deviceID IsNot Nothing, New ObjectParameter("deviceID", deviceID), New ObjectParameter("deviceID", GetType(String)))
    
            Dim udid_idParameter As ObjectParameter = If(udid_id.HasValue, New ObjectParameter("udid_id", udid_id), New ObjectParameter("udid_id", GetType(Integer)))
    
            Dim ticketIDParameter As ObjectParameter = If(ticketID IsNot Nothing, New ObjectParameter("ticketID", ticketID), New ObjectParameter("ticketID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertPayitComplaint", mobilenoParameter, emailIDParameter, msgParameter, nameParameter, deviceIDParameter, udid_idParameter, ticketIDParameter)
        End Function
    
        Public Overridable Function InsertPayitIsysTransactionForPayments(mobileno As String, amount As Nullable(Of Double), servicecode As String, trackID As String, deviceID As String, isysID As Nullable(Of Long), status As String, paymentapi As String) As Integer
            Dim mobilenoParameter As ObjectParameter = If(mobileno IsNot Nothing, New ObjectParameter("mobileno", mobileno), New ObjectParameter("mobileno", GetType(String)))
    
            Dim amountParameter As ObjectParameter = If(amount.HasValue, New ObjectParameter("amount", amount), New ObjectParameter("amount", GetType(Double)))
    
            Dim servicecodeParameter As ObjectParameter = If(servicecode IsNot Nothing, New ObjectParameter("servicecode", servicecode), New ObjectParameter("servicecode", GetType(String)))
    
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(String)))
    
            Dim deviceIDParameter As ObjectParameter = If(deviceID IsNot Nothing, New ObjectParameter("deviceID", deviceID), New ObjectParameter("deviceID", GetType(String)))
    
            Dim isysIDParameter As ObjectParameter = If(isysID.HasValue, New ObjectParameter("isysID", isysID), New ObjectParameter("isysID", GetType(Long)))
    
            Dim statusParameter As ObjectParameter = If(status IsNot Nothing, New ObjectParameter("status", status), New ObjectParameter("status", GetType(String)))
    
            Dim paymentapiParameter As ObjectParameter = If(paymentapi IsNot Nothing, New ObjectParameter("paymentapi", paymentapi), New ObjectParameter("paymentapi", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertPayitIsysTransactionForPayments", mobilenoParameter, amountParameter, servicecodeParameter, trackIDParameter, deviceIDParameter, isysIDParameter, statusParameter, paymentapiParameter)
        End Function
    
        Public Overridable Function InsertPustNotiications(message As String, platform As String, application As String, reference As String, messageCategory As String, scheduledDate As Nullable(Of Date), status As Nullable(Of Boolean), tableReferenceID As Nullable(Of Integer)) As Integer
            Dim messageParameter As ObjectParameter = If(message IsNot Nothing, New ObjectParameter("Message", message), New ObjectParameter("Message", GetType(String)))
    
            Dim platformParameter As ObjectParameter = If(platform IsNot Nothing, New ObjectParameter("Platform", platform), New ObjectParameter("Platform", GetType(String)))
    
            Dim applicationParameter As ObjectParameter = If(application IsNot Nothing, New ObjectParameter("Application", application), New ObjectParameter("Application", GetType(String)))
    
            Dim referenceParameter As ObjectParameter = If(reference IsNot Nothing, New ObjectParameter("Reference", reference), New ObjectParameter("Reference", GetType(String)))
    
            Dim messageCategoryParameter As ObjectParameter = If(messageCategory IsNot Nothing, New ObjectParameter("MessageCategory", messageCategory), New ObjectParameter("MessageCategory", GetType(String)))
    
            Dim scheduledDateParameter As ObjectParameter = If(scheduledDate.HasValue, New ObjectParameter("ScheduledDate", scheduledDate), New ObjectParameter("ScheduledDate", GetType(Date)))
    
            Dim statusParameter As ObjectParameter = If(status.HasValue, New ObjectParameter("Status", status), New ObjectParameter("Status", GetType(Boolean)))
    
            Dim tableReferenceIDParameter As ObjectParameter = If(tableReferenceID.HasValue, New ObjectParameter("TableReferenceID", tableReferenceID), New ObjectParameter("TableReferenceID", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertPustNotiications", messageParameter, platformParameter, applicationParameter, referenceParameter, messageCategoryParameter, scheduledDateParameter, statusParameter, tableReferenceIDParameter)
        End Function
    
        Public Overridable Function InsertRestrictionLimitedTransaction(statusDesc As String, trackID As String, deviceID As String, serviceCode As String) As Integer
            Dim statusDescParameter As ObjectParameter = If(statusDesc IsNot Nothing, New ObjectParameter("statusDesc", statusDesc), New ObjectParameter("statusDesc", GetType(String)))
    
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(String)))
    
            Dim deviceIDParameter As ObjectParameter = If(deviceID IsNot Nothing, New ObjectParameter("deviceID", deviceID), New ObjectParameter("deviceID", GetType(String)))
    
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("serviceCode", serviceCode), New ObjectParameter("serviceCode", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertRestrictionLimitedTransaction", statusDescParameter, trackIDParameter, deviceIDParameter, serviceCodeParameter)
        End Function
    
        Public Overridable Function InsertRestrictionTransaction(mobileno As String, amount As String, servicecode As String, uDID_ID As String, trackID As String, deviceID As String, info1 As String, info2 As String) As Integer
            Dim mobilenoParameter As ObjectParameter = If(mobileno IsNot Nothing, New ObjectParameter("mobileno", mobileno), New ObjectParameter("mobileno", GetType(String)))
    
            Dim amountParameter As ObjectParameter = If(amount IsNot Nothing, New ObjectParameter("amount", amount), New ObjectParameter("amount", GetType(String)))
    
            Dim servicecodeParameter As ObjectParameter = If(servicecode IsNot Nothing, New ObjectParameter("servicecode", servicecode), New ObjectParameter("servicecode", GetType(String)))
    
            Dim uDID_IDParameter As ObjectParameter = If(uDID_ID IsNot Nothing, New ObjectParameter("UDID_ID", uDID_ID), New ObjectParameter("UDID_ID", GetType(String)))
    
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(String)))
    
            Dim deviceIDParameter As ObjectParameter = If(deviceID IsNot Nothing, New ObjectParameter("deviceID", deviceID), New ObjectParameter("deviceID", GetType(String)))
    
            Dim info1Parameter As ObjectParameter = If(info1 IsNot Nothing, New ObjectParameter("info1", info1), New ObjectParameter("info1", GetType(String)))
    
            Dim info2Parameter As ObjectParameter = If(info2 IsNot Nothing, New ObjectParameter("info2", info2), New ObjectParameter("info2", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertRestrictionTransaction", mobilenoParameter, amountParameter, servicecodeParameter, uDID_IDParameter, trackIDParameter, deviceIDParameter, info1Parameter, info2Parameter)
        End Function
    
        Public Overridable Function InsertThirdPartyTransaction(mobileno As String, amount As String, servicecode As String, uDID_ID As String, trackID As String, deviceID As String, isys As Nullable(Of Long), company As String, user As String, pass As String, rlink As String, tid As Nullable(Of Long), ptype As String, udf4 As String) As Integer
            Dim mobilenoParameter As ObjectParameter = If(mobileno IsNot Nothing, New ObjectParameter("mobileno", mobileno), New ObjectParameter("mobileno", GetType(String)))
    
            Dim amountParameter As ObjectParameter = If(amount IsNot Nothing, New ObjectParameter("amount", amount), New ObjectParameter("amount", GetType(String)))
    
            Dim servicecodeParameter As ObjectParameter = If(servicecode IsNot Nothing, New ObjectParameter("servicecode", servicecode), New ObjectParameter("servicecode", GetType(String)))
    
            Dim uDID_IDParameter As ObjectParameter = If(uDID_ID IsNot Nothing, New ObjectParameter("UDID_ID", uDID_ID), New ObjectParameter("UDID_ID", GetType(String)))
    
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(String)))
    
            Dim deviceIDParameter As ObjectParameter = If(deviceID IsNot Nothing, New ObjectParameter("deviceID", deviceID), New ObjectParameter("deviceID", GetType(String)))
    
            Dim isysParameter As ObjectParameter = If(isys.HasValue, New ObjectParameter("isys", isys), New ObjectParameter("isys", GetType(Long)))
    
            Dim companyParameter As ObjectParameter = If(company IsNot Nothing, New ObjectParameter("company", company), New ObjectParameter("company", GetType(String)))
    
            Dim userParameter As ObjectParameter = If(user IsNot Nothing, New ObjectParameter("user", user), New ObjectParameter("user", GetType(String)))
    
            Dim passParameter As ObjectParameter = If(pass IsNot Nothing, New ObjectParameter("pass", pass), New ObjectParameter("pass", GetType(String)))
    
            Dim rlinkParameter As ObjectParameter = If(rlink IsNot Nothing, New ObjectParameter("rlink", rlink), New ObjectParameter("rlink", GetType(String)))
    
            Dim tidParameter As ObjectParameter = If(tid.HasValue, New ObjectParameter("tid", tid), New ObjectParameter("tid", GetType(Long)))
    
            Dim ptypeParameter As ObjectParameter = If(ptype IsNot Nothing, New ObjectParameter("ptype", ptype), New ObjectParameter("ptype", GetType(String)))
    
            Dim udf4Parameter As ObjectParameter = If(udf4 IsNot Nothing, New ObjectParameter("udf4", udf4), New ObjectParameter("udf4", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertThirdPartyTransaction", mobilenoParameter, amountParameter, servicecodeParameter, uDID_IDParameter, trackIDParameter, deviceIDParameter, isysParameter, companyParameter, userParameter, passParameter, rlinkParameter, tidParameter, ptypeParameter, udf4Parameter)
        End Function
    
        Public Overridable Function InsertTopupTransaction(amt As String, pamt As String, varTrackId As String, topupamt As String, topupresult As String, topuprawresponse As String, mob As String, refid As String, user As String, knetprocess As String, ptype As String) As Integer
            Dim amtParameter As ObjectParameter = If(amt IsNot Nothing, New ObjectParameter("amt", amt), New ObjectParameter("amt", GetType(String)))
    
            Dim pamtParameter As ObjectParameter = If(pamt IsNot Nothing, New ObjectParameter("pamt", pamt), New ObjectParameter("pamt", GetType(String)))
    
            Dim varTrackIdParameter As ObjectParameter = If(varTrackId IsNot Nothing, New ObjectParameter("varTrackId", varTrackId), New ObjectParameter("varTrackId", GetType(String)))
    
            Dim topupamtParameter As ObjectParameter = If(topupamt IsNot Nothing, New ObjectParameter("topupamt", topupamt), New ObjectParameter("topupamt", GetType(String)))
    
            Dim topupresultParameter As ObjectParameter = If(topupresult IsNot Nothing, New ObjectParameter("topupresult", topupresult), New ObjectParameter("topupresult", GetType(String)))
    
            Dim topuprawresponseParameter As ObjectParameter = If(topuprawresponse IsNot Nothing, New ObjectParameter("topuprawresponse", topuprawresponse), New ObjectParameter("topuprawresponse", GetType(String)))
    
            Dim mobParameter As ObjectParameter = If(mob IsNot Nothing, New ObjectParameter("mob", mob), New ObjectParameter("mob", GetType(String)))
    
            Dim refidParameter As ObjectParameter = If(refid IsNot Nothing, New ObjectParameter("refid", refid), New ObjectParameter("refid", GetType(String)))
    
            Dim userParameter As ObjectParameter = If(user IsNot Nothing, New ObjectParameter("user", user), New ObjectParameter("user", GetType(String)))
    
            Dim knetprocessParameter As ObjectParameter = If(knetprocess IsNot Nothing, New ObjectParameter("knetprocess", knetprocess), New ObjectParameter("knetprocess", GetType(String)))
    
            Dim ptypeParameter As ObjectParameter = If(ptype IsNot Nothing, New ObjectParameter("ptype", ptype), New ObjectParameter("ptype", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertTopupTransaction", amtParameter, pamtParameter, varTrackIdParameter, topupamtParameter, topupresultParameter, topuprawresponseParameter, mobParameter, refidParameter, userParameter, knetprocessParameter, ptypeParameter)
        End Function
    
        Public Overridable Function InsertZakatPaymentTransaction(projectID As Nullable(Of Integer), mobilenumber As String, email As String, amount As String, status As String, trackID As String) As Integer
            Dim projectIDParameter As ObjectParameter = If(projectID.HasValue, New ObjectParameter("projectID", projectID), New ObjectParameter("projectID", GetType(Integer)))
    
            Dim mobilenumberParameter As ObjectParameter = If(mobilenumber IsNot Nothing, New ObjectParameter("mobilenumber", mobilenumber), New ObjectParameter("mobilenumber", GetType(String)))
    
            Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("email", email), New ObjectParameter("email", GetType(String)))
    
            Dim amountParameter As ObjectParameter = If(amount IsNot Nothing, New ObjectParameter("amount", amount), New ObjectParameter("amount", GetType(String)))
    
            Dim statusParameter As ObjectParameter = If(status IsNot Nothing, New ObjectParameter("Status", status), New ObjectParameter("Status", GetType(String)))
    
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("InsertZakatPaymentTransaction", projectIDParameter, mobilenumberParameter, emailParameter, amountParameter, statusParameter, trackIDParameter)
        End Function
    
        Public Overridable Function MyPaymentCustomerRegister_Activate_Deactivate(deviceUID As String, mobileNo As String, oTP As String, email As String, civilID As String) As Integer
            Dim deviceUIDParameter As ObjectParameter = If(deviceUID IsNot Nothing, New ObjectParameter("DeviceUID", deviceUID), New ObjectParameter("DeviceUID", GetType(String)))
    
            Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))
    
            Dim oTPParameter As ObjectParameter = If(oTP IsNot Nothing, New ObjectParameter("OTP", oTP), New ObjectParameter("OTP", GetType(String)))
    
            Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))
    
            Dim civilIDParameter As ObjectParameter = If(civilID IsNot Nothing, New ObjectParameter("CivilID", civilID), New ObjectParameter("CivilID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MyPaymentCustomerRegister_Activate_Deactivate", deviceUIDParameter, mobileNoParameter, oTPParameter, emailParameter, civilIDParameter)
        End Function
    
        Public Overridable Function MyPaymentCustomerRegister_Generate_OTP(deviceUID As String, mobileNo As String) As Integer
            Dim deviceUIDParameter As ObjectParameter = If(deviceUID IsNot Nothing, New ObjectParameter("DeviceUID", deviceUID), New ObjectParameter("DeviceUID", GetType(String)))
    
            Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MyPaymentCustomerRegister_Generate_OTP", deviceUIDParameter, mobileNoParameter)
        End Function
    
        Public Overridable Function MyPaymentCustomerRegister_INSERT(mobileNo As String, deviceUID As String, appIdentifier As String, email As String, civilID As String) As Integer
            Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))
    
            Dim deviceUIDParameter As ObjectParameter = If(deviceUID IsNot Nothing, New ObjectParameter("DeviceUID", deviceUID), New ObjectParameter("DeviceUID", GetType(String)))
    
            Dim appIdentifierParameter As ObjectParameter = If(appIdentifier IsNot Nothing, New ObjectParameter("AppIdentifier", appIdentifier), New ObjectParameter("AppIdentifier", GetType(String)))
    
            Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))
    
            Dim civilIDParameter As ObjectParameter = If(civilID IsNot Nothing, New ObjectParameter("CivilID", civilID), New ObjectParameter("CivilID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MyPaymentCustomerRegister_INSERT", mobileNoParameter, deviceUIDParameter, appIdentifierParameter, emailParameter, civilIDParameter)
        End Function
    
        Public Overridable Function MyPaymentCustomerRegister_PendingTransactions(deviceUID As String, mobileNo As String, email As String, civilID As String) As ObjectResult(Of MyPaymentCustomerRegister_PendingTransactions_Result)
            Dim deviceUIDParameter As ObjectParameter = If(deviceUID IsNot Nothing, New ObjectParameter("DeviceUID", deviceUID), New ObjectParameter("DeviceUID", GetType(String)))
    
            Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))
    
            Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))
    
            Dim civilIDParameter As ObjectParameter = If(civilID IsNot Nothing, New ObjectParameter("CivilID", civilID), New ObjectParameter("CivilID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MyPaymentCustomerRegister_PendingTransactions_Result)("MyPaymentCustomerRegister_PendingTransactions", deviceUIDParameter, mobileNoParameter, emailParameter, civilIDParameter)
        End Function
    
        Public Overridable Function MyPaymentCustomerRegister_TransactionsHistory(deviceUID As String, mobileNo As String, email As String, civilID As String) As ObjectResult(Of MyPaymentCustomerRegister_TransactionsHistory_Result)
            Dim deviceUIDParameter As ObjectParameter = If(deviceUID IsNot Nothing, New ObjectParameter("DeviceUID", deviceUID), New ObjectParameter("DeviceUID", GetType(String)))
    
            Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))
    
            Dim emailParameter As ObjectParameter = If(email IsNot Nothing, New ObjectParameter("Email", email), New ObjectParameter("Email", GetType(String)))
    
            Dim civilIDParameter As ObjectParameter = If(civilID IsNot Nothing, New ObjectParameter("CivilID", civilID), New ObjectParameter("CivilID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of MyPaymentCustomerRegister_TransactionsHistory_Result)("MyPaymentCustomerRegister_TransactionsHistory", deviceUIDParameter, mobileNoParameter, emailParameter, civilIDParameter)
        End Function
    
        Public Overridable Function MyPaymentOrders_UPDATE(column As String, value As String, id As String) As Integer
            Dim columnParameter As ObjectParameter = If(column IsNot Nothing, New ObjectParameter("column", column), New ObjectParameter("column", GetType(String)))
    
            Dim valueParameter As ObjectParameter = If(value IsNot Nothing, New ObjectParameter("value", value), New ObjectParameter("value", GetType(String)))
    
            Dim idParameter As ObjectParameter = If(id IsNot Nothing, New ObjectParameter("id", id), New ObjectParameter("id", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("MyPaymentOrders_UPDATE", columnParameter, valueParameter, idParameter)
        End Function
    
        Public Overridable Function PayitiSYS_Insert(isysid As String, transactionId As String, mobileNo As String, serviceCode As String, amount As Nullable(Of Double), id As ObjectParameter) As Integer
            Dim isysidParameter As ObjectParameter = If(isysid IsNot Nothing, New ObjectParameter("Isysid", isysid), New ObjectParameter("Isysid", GetType(String)))
    
            Dim transactionIdParameter As ObjectParameter = If(transactionId IsNot Nothing, New ObjectParameter("TransactionId", transactionId), New ObjectParameter("TransactionId", GetType(String)))
    
            Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("mobileNo", mobileNo), New ObjectParameter("mobileNo", GetType(String)))
    
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("serviceCode", serviceCode), New ObjectParameter("serviceCode", GetType(String)))
    
            Dim amountParameter As ObjectParameter = If(amount.HasValue, New ObjectParameter("Amount", amount), New ObjectParameter("Amount", GetType(Double)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PayitiSYS_Insert", isysidParameter, transactionIdParameter, mobileNoParameter, serviceCodeParameter, amountParameter, id)
        End Function
    
        Public Overridable Function PayitUserInfo_Restrictions_cid_SELECT(iD_UDID As String, mob As String) As Integer
            Dim iD_UDIDParameter As ObjectParameter = If(iD_UDID IsNot Nothing, New ObjectParameter("ID_UDID", iD_UDID), New ObjectParameter("ID_UDID", GetType(String)))
    
            Dim mobParameter As ObjectParameter = If(mob IsNot Nothing, New ObjectParameter("mob", mob), New ObjectParameter("mob", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("PayitUserInfo_Restrictions_cid_SELECT", iD_UDIDParameter, mobParameter)
        End Function
    
        Public Overridable Function ProcessFailedPIN(service As String, aMT As Nullable(Of Double), trackid As String, oOID As ObjectParameter, pIN As ObjectParameter) As Integer
            Dim serviceParameter As ObjectParameter = If(service IsNot Nothing, New ObjectParameter("service", service), New ObjectParameter("service", GetType(String)))
    
            Dim aMTParameter As ObjectParameter = If(aMT.HasValue, New ObjectParameter("AMT", aMT), New ObjectParameter("AMT", GetType(Double)))
    
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ProcessFailedPIN", serviceParameter, aMTParameter, trackidParameter, oOID, pIN)
        End Function
    
        Public Overridable Function ProcessFailedPIN2(service As String, aMT As Nullable(Of Double), trackid As String) As ObjectResult(Of ProcessFailedPIN2_Result)
            Dim serviceParameter As ObjectParameter = If(service IsNot Nothing, New ObjectParameter("service", service), New ObjectParameter("service", GetType(String)))
    
            Dim aMTParameter As ObjectParameter = If(aMT.HasValue, New ObjectParameter("AMT", aMT), New ObjectParameter("AMT", GetType(Double)))
    
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ProcessFailedPIN2_Result)("ProcessFailedPIN2", serviceParameter, aMTParameter, trackidParameter)
        End Function
    
        Public Overridable Function ProcessFailedPinNew(trackid As String) As ObjectResult(Of ProcessFailedPinNew_Result)
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of ProcessFailedPinNew_Result)("ProcessFailedPinNew", trackidParameter)
        End Function
    
        Public Overridable Function ProcessSuccessPIN(service As String, aMT As Nullable(Of Double), trackid As String, oOID As ObjectParameter, pIN As ObjectParameter, serialout As ObjectParameter) As Integer
            Dim serviceParameter As ObjectParameter = If(service IsNot Nothing, New ObjectParameter("service", service), New ObjectParameter("service", GetType(String)))
    
            Dim aMTParameter As ObjectParameter = If(aMT.HasValue, New ObjectParameter("AMT", aMT), New ObjectParameter("AMT", GetType(Double)))
    
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ProcessSuccessPIN", serviceParameter, aMTParameter, trackidParameter, oOID, pIN, serialout)
        End Function
    
        Public Overridable Function ProcessSuccessPINnew(trackid As String) As Integer
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ProcessSuccessPINnew", trackidParameter)
        End Function
    
        Public Overridable Function ProcessSuccessPINTest(service As String, aMT As Nullable(Of Double), trackid As String, oOID As ObjectParameter, pIN As ObjectParameter, serialout As ObjectParameter) As Integer
            Dim serviceParameter As ObjectParameter = If(service IsNot Nothing, New ObjectParameter("service", service), New ObjectParameter("service", GetType(String)))
    
            Dim aMTParameter As ObjectParameter = If(aMT.HasValue, New ObjectParameter("AMT", aMT), New ObjectParameter("AMT", GetType(Double)))
    
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ProcessSuccessPINTest", serviceParameter, aMTParameter, trackidParameter, oOID, pIN, serialout)
        End Function
    
        Public Overridable Function ProcessSuccessPINTst(service As String, aMT As Nullable(Of Double), trackid As String, oOID As ObjectParameter, pIN As ObjectParameter, serialout As ObjectParameter) As Integer
            Dim serviceParameter As ObjectParameter = If(service IsNot Nothing, New ObjectParameter("service", service), New ObjectParameter("service", GetType(String)))
    
            Dim aMTParameter As ObjectParameter = If(aMT.HasValue, New ObjectParameter("AMT", aMT), New ObjectParameter("AMT", GetType(Double)))
    
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ProcessSuccessPINTst", serviceParameter, aMTParameter, trackidParameter, oOID, pIN, serialout)
        End Function
    
        Public Overridable Function sensms() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sensms")
        End Function
    
        Public Overridable Function SMSPIN_INSERT(trackID As String, message As String, serviceCode As String, mailID As String, mobileNo As String) As Integer
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("TrackID", trackID), New ObjectParameter("TrackID", GetType(String)))
    
            Dim messageParameter As ObjectParameter = If(message IsNot Nothing, New ObjectParameter("Message", message), New ObjectParameter("Message", GetType(String)))
    
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("ServiceCode", serviceCode), New ObjectParameter("ServiceCode", GetType(String)))
    
            Dim mailIDParameter As ObjectParameter = If(mailID IsNot Nothing, New ObjectParameter("MailID", mailID), New ObjectParameter("MailID", GetType(String)))
    
            Dim mobileNoParameter As ObjectParameter = If(mobileNo IsNot Nothing, New ObjectParameter("MobileNo", mobileNo), New ObjectParameter("MobileNo", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SMSPIN_INSERT", trackIDParameter, messageParameter, serviceCodeParameter, mailIDParameter, mobileNoParameter)
        End Function
    
        Public Overridable Function SMSPIN_UPDATE(column As String, value As String, trackid As String) As Integer
            Dim columnParameter As ObjectParameter = If(column IsNot Nothing, New ObjectParameter("column", column), New ObjectParameter("column", GetType(String)))
    
            Dim valueParameter As ObjectParameter = If(value IsNot Nothing, New ObjectParameter("value", value), New ObjectParameter("value", GetType(String)))
    
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SMSPIN_UPDATE", columnParameter, valueParameter, trackidParameter)
        End Function
    
        Public Overridable Function sp_alterdiagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))
    
            Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
        End Function
    
        Public Overridable Function sp_creatediagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))
    
            Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
        End Function
    
        Public Overridable Function sp_dropdiagram(diagramname As String, owner_id As Nullable(Of Integer)) As Integer
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter)
        End Function
    
        Public Overridable Function Sp_GetSerPayments(trackID As String) As Integer
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Sp_GetSerPayments", trackIDParameter)
        End Function
    
        Public Overridable Function Sp_GetServices_Summary() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Sp_GetServices_Summary")
        End Function
    
        Public Overridable Function Sp_GetServices_Transactions(countryID As Nullable(Of Integer), serviceCode As String, paymentChannelCode As Nullable(Of Integer), amount As Nullable(Of Double), startDate As Nullable(Of Date), endDate As Nullable(Of Date), isTransactionDate As Nullable(Of Boolean), mobileNumber As String, paymentStatus As String) As Integer
            Dim countryIDParameter As ObjectParameter = If(countryID.HasValue, New ObjectParameter("countryID", countryID), New ObjectParameter("countryID", GetType(Integer)))
    
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("serviceCode", serviceCode), New ObjectParameter("serviceCode", GetType(String)))
    
            Dim paymentChannelCodeParameter As ObjectParameter = If(paymentChannelCode.HasValue, New ObjectParameter("paymentChannelCode", paymentChannelCode), New ObjectParameter("paymentChannelCode", GetType(Integer)))
    
            Dim amountParameter As ObjectParameter = If(amount.HasValue, New ObjectParameter("amount", amount), New ObjectParameter("amount", GetType(Double)))
    
            Dim startDateParameter As ObjectParameter = If(startDate.HasValue, New ObjectParameter("startDate", startDate), New ObjectParameter("startDate", GetType(Date)))
    
            Dim endDateParameter As ObjectParameter = If(endDate.HasValue, New ObjectParameter("endDate", endDate), New ObjectParameter("endDate", GetType(Date)))
    
            Dim isTransactionDateParameter As ObjectParameter = If(isTransactionDate.HasValue, New ObjectParameter("isTransactionDate", isTransactionDate), New ObjectParameter("isTransactionDate", GetType(Boolean)))
    
            Dim mobileNumberParameter As ObjectParameter = If(mobileNumber IsNot Nothing, New ObjectParameter("mobileNumber", mobileNumber), New ObjectParameter("mobileNumber", GetType(String)))
    
            Dim paymentStatusParameter As ObjectParameter = If(paymentStatus IsNot Nothing, New ObjectParameter("paymentStatus", paymentStatus), New ObjectParameter("paymentStatus", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Sp_GetServices_Transactions", countryIDParameter, serviceCodeParameter, paymentChannelCodeParameter, amountParameter, startDateParameter, endDateParameter, isTransactionDateParameter, mobileNumberParameter, paymentStatusParameter)
        End Function
    
        Public Overridable Function sp_helpdiagramdefinition(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagramdefinition_Result)
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagramdefinition_Result)("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter)
        End Function
    
        Public Overridable Function sp_helpdiagrams(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagrams_Result)
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagrams_Result)("sp_helpdiagrams", diagramnameParameter, owner_idParameter)
        End Function
    
        Public Overridable Function sp_renamediagram(diagramname As String, owner_id As Nullable(Of Integer), new_diagramname As String) As Integer
            Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))
    
            Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))
    
            Dim new_diagramnameParameter As ObjectParameter = If(new_diagramname IsNot Nothing, New ObjectParameter("new_diagramname", new_diagramname), New ObjectParameter("new_diagramname", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter)
        End Function
    
        Public Overridable Function sp_upgraddiagrams() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_upgraddiagrams")
        End Function
    
        Public Overridable Function split(str As String) As Integer
            Dim strParameter As ObjectParameter = If(str IsNot Nothing, New ObjectParameter("str", str), New ObjectParameter("str", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("split", strParameter)
        End Function
    
        Public Overridable Function splitNew(str1 As String) As Integer
            Dim str1Parameter As ObjectParameter = If(str1 IsNot Nothing, New ObjectParameter("str1", str1), New ObjectParameter("str1", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("splitNew", str1Parameter)
        End Function
    
        Public Overridable Function SqlQueryNotificationStoredProcedure_6b5274c2_0db4_48f0_9b03_6fc8f5805c11() As ObjectResult(Of Nullable(Of System.Guid))
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of System.Guid))("SqlQueryNotificationStoredProcedure_6b5274c2_0db4_48f0_9b03_6fc8f5805c11")
        End Function
    
        Public Overridable Function SqlQueryNotificationStoredProcedure_9d5c3cc0_3540_483f_86be_694c28043f59() As ObjectResult(Of Nullable(Of System.Guid))
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of System.Guid))("SqlQueryNotificationStoredProcedure_9d5c3cc0_3540_483f_86be_694c28043f59")
        End Function
    
        Public Overridable Function SqlQueryNotificationStoredProcedure_d78e0dd4_68eb_4e5b_a988_dda6f67b3f54() As ObjectResult(Of Nullable(Of System.Guid))
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of System.Guid))("SqlQueryNotificationStoredProcedure_d78e0dd4_68eb_4e5b_a988_dda6f67b3f54")
        End Function
    
        Public Overridable Function Test(tracid As Nullable(Of Long)) As Integer
            Dim tracidParameter As ObjectParameter = If(tracid.HasValue, New ObjectParameter("tracid", tracid), New ObjectParameter("tracid", GetType(Long)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Test", tracidParameter)
        End Function
    
        Public Overridable Function test1() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("test1")
        End Function
    
        Public Overridable Function test12() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("test12")
        End Function
    
        Public Overridable Function test2() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("test2")
        End Function
    
        Public Overridable Function TestProcessSuccessPINnew(trackid As String) As Integer
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("TestProcessSuccessPINnew", trackidParameter)
        End Function
    
        Public Overridable Function testSerial() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("testSerial")
        End Function
    
        Public Overridable Function TestThirdParty() As ObjectResult(Of String)
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("TestThirdParty")
        End Function
    
        Public Overridable Function thirdParty_knet_trans_check_success_duplicates(cid_list As String) As Integer
            Dim cid_listParameter As ObjectParameter = If(cid_list IsNot Nothing, New ObjectParameter("cid_list", cid_list), New ObjectParameter("cid_list", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("thirdParty_knet_trans_check_success_duplicates", cid_listParameter)
        End Function
    
        Public Overridable Function thirdParty_knet_trans_check_success_duplicates_Test(cid_list As String) As Integer
            Dim cid_listParameter As ObjectParameter = If(cid_list IsNot Nothing, New ObjectParameter("cid_list", cid_list), New ObjectParameter("cid_list", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("thirdParty_knet_trans_check_success_duplicates_Test", cid_listParameter)
        End Function
    
        Public Overridable Function ThirdParty_knet_trans_KNet_Receipt_UPDATE(payid As String, tranid As String, refid As String, result As String, postdate As String, trackid As String, link As ObjectParameter) As Integer
            Dim payidParameter As ObjectParameter = If(payid IsNot Nothing, New ObjectParameter("payid", payid), New ObjectParameter("payid", GetType(String)))
    
            Dim tranidParameter As ObjectParameter = If(tranid IsNot Nothing, New ObjectParameter("tranid", tranid), New ObjectParameter("tranid", GetType(String)))
    
            Dim refidParameter As ObjectParameter = If(refid IsNot Nothing, New ObjectParameter("refid", refid), New ObjectParameter("refid", GetType(String)))
    
            Dim resultParameter As ObjectParameter = If(result IsNot Nothing, New ObjectParameter("result", result), New ObjectParameter("result", GetType(String)))
    
            Dim postdateParameter As ObjectParameter = If(postdate IsNot Nothing, New ObjectParameter("postdate", postdate), New ObjectParameter("postdate", GetType(String)))
    
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ThirdParty_knet_trans_KNet_Receipt_UPDATE", payidParameter, tranidParameter, refidParameter, resultParameter, postdateParameter, trackidParameter, link)
        End Function
    
        Public Overridable Function ThirdParty_knet_trans_UPDATE(column As String, value As String, trackid As String) As Integer
            Dim columnParameter As ObjectParameter = If(column IsNot Nothing, New ObjectParameter("column", column), New ObjectParameter("column", GetType(String)))
    
            Dim valueParameter As ObjectParameter = If(value IsNot Nothing, New ObjectParameter("value", value), New ObjectParameter("value", GetType(String)))
    
            Dim trackidParameter As ObjectParameter = If(trackid IsNot Nothing, New ObjectParameter("trackid", trackid), New ObjectParameter("trackid", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ThirdParty_knet_trans_UPDATE", columnParameter, valueParameter, trackidParameter)
        End Function
    
        Public Overridable Function UpdateThirdPartyTransaction(trackID As String, statusDesc As String) As Integer
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("trackID", trackID), New ObjectParameter("trackID", GetType(String)))
    
            Dim statusDescParameter As ObjectParameter = If(statusDesc IsNot Nothing, New ObjectParameter("statusDesc", statusDesc), New ObjectParameter("statusDesc", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("UpdateThirdPartyTransaction", trackIDParameter, statusDescParameter)
        End Function
    
        Public Overridable Function USP_Get_Action_Privileges(iRoleId As Nullable(Of Integer)) As ObjectResult(Of USP_Get_Action_Privileges_Result)
            Dim iRoleIdParameter As ObjectParameter = If(iRoleId.HasValue, New ObjectParameter("iRoleId", iRoleId), New ObjectParameter("iRoleId", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_Get_Action_Privileges_Result)("USP_Get_Action_Privileges", iRoleIdParameter)
        End Function
    
        Public Overridable Function USP_Get_Role_Privileges() As Integer
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_Get_Role_Privileges")
        End Function
    
        Public Overridable Function USP_GetProcessedByName() As ObjectResult(Of USP_GetProcessedByName_Result)
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_GetProcessedByName_Result)("USP_GetProcessedByName")
        End Function
    
        Public Overridable Function USP_GetServices() As ObjectResult(Of USP_GetServices_Result)
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_GetServices_Result)("USP_GetServices")
        End Function
    
        Public Overridable Function USP_Save_Action_Privileges(iRoleId As Nullable(Of Integer), iMenuId As Nullable(Of Integer), vAction As String, bChecked As Nullable(Of Boolean), iUpdatedBy As Nullable(Of Integer)) As Integer
            Dim iRoleIdParameter As ObjectParameter = If(iRoleId.HasValue, New ObjectParameter("iRoleId", iRoleId), New ObjectParameter("iRoleId", GetType(Integer)))
    
            Dim iMenuIdParameter As ObjectParameter = If(iMenuId.HasValue, New ObjectParameter("iMenuId", iMenuId), New ObjectParameter("iMenuId", GetType(Integer)))
    
            Dim vActionParameter As ObjectParameter = If(vAction IsNot Nothing, New ObjectParameter("vAction", vAction), New ObjectParameter("vAction", GetType(String)))
    
            Dim bCheckedParameter As ObjectParameter = If(bChecked.HasValue, New ObjectParameter("bChecked", bChecked), New ObjectParameter("bChecked", GetType(Boolean)))
    
            Dim iUpdatedByParameter As ObjectParameter = If(iUpdatedBy.HasValue, New ObjectParameter("iUpdatedBy", iUpdatedBy), New ObjectParameter("iUpdatedBy", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_Save_Action_Privileges", iRoleIdParameter, iMenuIdParameter, vActionParameter, bCheckedParameter, iUpdatedByParameter)
        End Function
    
        Public Overridable Function USP_Save_Role_Privileges(iRoleId As Nullable(Of Integer), iMenuId As Nullable(Of Integer), vHasAccess As String, iUpdatedBy As Nullable(Of Integer)) As Integer
            Dim iRoleIdParameter As ObjectParameter = If(iRoleId.HasValue, New ObjectParameter("iRoleId", iRoleId), New ObjectParameter("iRoleId", GetType(Integer)))
    
            Dim iMenuIdParameter As ObjectParameter = If(iMenuId.HasValue, New ObjectParameter("iMenuId", iMenuId), New ObjectParameter("iMenuId", GetType(Integer)))
    
            Dim vHasAccessParameter As ObjectParameter = If(vHasAccess IsNot Nothing, New ObjectParameter("vHasAccess", vHasAccess), New ObjectParameter("vHasAccess", GetType(String)))
    
            Dim iUpdatedByParameter As ObjectParameter = If(iUpdatedBy.HasValue, New ObjectParameter("iUpdatedBy", iUpdatedBy), New ObjectParameter("iUpdatedBy", GetType(Integer)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_Save_Role_Privileges", iRoleIdParameter, iMenuIdParameter, vHasAccessParameter, iUpdatedByParameter)
        End Function
    
        Public Overridable Function USP_updatePaymentTables(trackID As String, serviceCode As String, referenceID As String, amt As Nullable(Of Double), commission As Nullable(Of Double), ptype As String, com As String) As Integer
            Dim trackIDParameter As ObjectParameter = If(trackID IsNot Nothing, New ObjectParameter("TrackID", trackID), New ObjectParameter("TrackID", GetType(String)))
    
            Dim serviceCodeParameter As ObjectParameter = If(serviceCode IsNot Nothing, New ObjectParameter("serviceCode", serviceCode), New ObjectParameter("serviceCode", GetType(String)))
    
            Dim referenceIDParameter As ObjectParameter = If(referenceID IsNot Nothing, New ObjectParameter("referenceID", referenceID), New ObjectParameter("referenceID", GetType(String)))
    
            Dim amtParameter As ObjectParameter = If(amt.HasValue, New ObjectParameter("amt", amt), New ObjectParameter("amt", GetType(Double)))
    
            Dim commissionParameter As ObjectParameter = If(commission.HasValue, New ObjectParameter("Commission", commission), New ObjectParameter("Commission", GetType(Double)))
    
            Dim ptypeParameter As ObjectParameter = If(ptype IsNot Nothing, New ObjectParameter("ptype", ptype), New ObjectParameter("ptype", GetType(String)))
    
            Dim comParameter As ObjectParameter = If(com IsNot Nothing, New ObjectParameter("com", com), New ObjectParameter("com", GetType(String)))
    
            Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_updatePaymentTables", trackIDParameter, serviceCodeParameter, referenceIDParameter, amtParameter, commissionParameter, ptypeParameter, comParameter)
        End Function
    
    End Class

End Namespace
